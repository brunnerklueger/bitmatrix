/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Simulador;

import Report.Report;
import Report.SubReport;
import java.awt.Cursor;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.export.SimpleExporterInput;
import net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;
import net.sf.jasperreports.export.SimplePdfExporterConfiguration;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author brunn
 */
public class GeraRelatorio extends javax.swing.JFrame {

    public static final String reportsPath = "../Prototipo/reports/";
    public static String generatedPdfPath = reportsPath +"\\saida.pdf";
   
    private File dir;
    private String basePath;
    
    
    /**
     * Creates new form GeraRelatorio
     */
    public GeraRelatorio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new javax.swing.ButtonGroup();
        cmbScenario = new javax.swing.JComboBox<>();
        cmbTopology = new javax.swing.JComboBox<>();
        cmbBitmapSize = new javax.swing.JComboBox<>();
        cmbThreshold = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        txtStartTime = new java.awt.TextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtFinalTime = new java.awt.TextField();
        btnGenerateReport = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtTracer = new java.awt.TextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        rb10 = new javax.swing.JRadioButton();
        rb20 = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        cmbScenario.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbScenarioItemStateChanged(evt);
            }
        });

        cmbTopology.setEnabled(false);
        cmbTopology.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTopologyItemStateChanged(evt);
            }
        });

        cmbBitmapSize.setEnabled(false);
        cmbBitmapSize.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbBitmapSizeItemStateChanged(evt);
            }
        });

        cmbThreshold.setEnabled(false);
        cmbThreshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbThresholdActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Cenário:");

        txtStartTime.setEditable(false);
        txtStartTime.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Tempo Inicial:");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Tempo Final:");

        txtFinalTime.setEditable(false);
        txtFinalTime.setEnabled(false);

        btnGenerateReport.setText("Gerar Relatório");
        btnGenerateReport.setEnabled(false);
        btnGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateReportActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Tracer:");

        txtTracer.setEditable(false);
        txtTracer.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setText("Topologia:");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel7.setText("Tamanho do Bitmap (Bits):");

        jLabel8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel8.setText("Threshold (%):");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel2.setName(""); // NOI18N

        rb10.setText("10");

        rb20.setText("20");
        rb20.setToolTipText("");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel9.setText("Top:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rb10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rb20, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rb10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rb20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(txtTracer, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFinalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel3))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(cmbScenario, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel8)
                    .addComponent(cmbThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenerateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(cmbBitmapSize, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTopology, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbBitmapSize, cmbScenario});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbScenario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(1, 1, 1)
                        .addComponent(txtStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(1, 1, 1)
                        .addComponent(txtTracer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(1, 1, 1)
                        .addComponent(txtFinalTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbTopology, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbBitmapSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(btnGenerateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.dir = new File("../Simulations/Analise");
        try {
            this.basePath = this.dir.getCanonicalPath();
        } catch (IOException ex) {
            Logger.getLogger(GeraRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
        fillCmbScenario();
        this.btnGroup.add(rb10);
        this.btnGroup.add(rb20);
        this.rb10.setSelected(true);
    }//GEN-LAST:event_formWindowOpened

    private void cmbScenarioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbScenarioItemStateChanged
        fillTxtBoxes();
        this.cmbTopology.removeAllItems();
        this.cmbTopology.addItem(null);
        fillCmbTopology();
        if(this.cmbScenario.getSelectedIndex()!=-1 && this.cmbTopology.getItemCount()> 0){
            this.cmbTopology.setEnabled(true);
        }else{
            this.cmbTopology.setEnabled(false);
        }
        this.cmbTopology.setSelectedIndex(-1);
    }//GEN-LAST:event_cmbScenarioItemStateChanged

    private void cmbTopologyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTopologyItemStateChanged
        this.cmbBitmapSize.removeAllItems();
        fillCmbBitmapSize();
        if(this.cmbTopology.getSelectedIndex()!=-1 && this.cmbBitmapSize.getItemCount()>0){
            this.cmbBitmapSize.setEnabled(true);
        }else{
            this.cmbBitmapSize.setEnabled(false);
        }
        
    }//GEN-LAST:event_cmbTopologyItemStateChanged

    private void cmbBitmapSizeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbBitmapSizeItemStateChanged
       this.cmbThreshold.removeAllItems();
       fillCmbThreshold();
       if((this.cmbBitmapSize.getSelectedIndex() !=-1) && this.cmbThreshold.getItemCount() >0){
           this.cmbThreshold.setEnabled(true);
       }else{
           this.cmbThreshold.setEnabled(false);
       }
    }//GEN-LAST:event_cmbBitmapSizeItemStateChanged

    private void cmbThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbThresholdActionPerformed
        if(this.cmbThreshold.getSelectedItem()!=null){
            this.btnGenerateReport.setEnabled(true);
        }else{
            this.btnGenerateReport.setEnabled(false);
        }
    }//GEN-LAST:event_cmbThresholdActionPerformed

    private void btnGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateReportActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        enableAllcomponents(Boolean.FALSE);
        int maxTop;//numero de tops (Top 10, Top 20) que o usuário escolheu ver
        if(this.rb10.isSelected()){
            maxTop = 10;
        }else{
            maxTop = 20;
        }
        
        String topologyPath = this.basePath+"\\"+ 
                    this.cmbScenario.getSelectedItem() +"\\"+
                    this.cmbTopology.getSelectedItem()+ "\\";
        String realFilePath = topologyPath + "real.txt";
        String bitmapFilePath = topologyPath + this.cmbBitmapSize.getSelectedItem() + "\\"+ 
                this.cmbThreshold.getSelectedItem() +".txt";
        LinkedHashMap<String,String> mapRealAnalysisFromFile =buildMapFromFile(realFilePath,maxTop);
        LinkedHashMap<String,String> mapBitmapAnalysisFromFile =buildMapFromFile(bitmapFilePath,maxTop);
        
        Report report =fillReportData(mapRealAnalysisFromFile, mapBitmapAnalysisFromFile, maxTop);
        File barchartFile =createGraphForReport(report.getLstAnalysisData(), Integer.valueOf(report.getMaxTop()));
        buildPDF(report,barchartFile);
        this.setCursor(Cursor.getDefaultCursor());
        int response = JOptionPane.showConfirmDialog(this, 
                "Relatório Gerado com Sucesso! Deseja visualiza-lo agora?", "Gerador de Relatório",
                JOptionPane.OK_OPTION);
        
        if(response == JOptionPane.OK_OPTION){
            showPdfFile(generatedPdfPath);
        }
        enableAllcomponents(Boolean.TRUE);
    }//GEN-LAST:event_btnGenerateReportActionPerformed

    private void fillCmbThreshold(){
        this.cmbThreshold.addItem(null);
        ArrayList<Integer> itemList = new ArrayList<>();
        if(this.cmbBitmapSize.getSelectedItem()!=null){
            String pathTmp = this.basePath+"\\"+ 
                    this.cmbScenario.getSelectedItem() +"\\"+
                    this.cmbTopology.getSelectedItem()+ "\\"+
                    this.cmbBitmapSize.getSelectedItem();
            File dirTmp = new File(pathTmp);
            File[] filesList = dirTmp.listFiles();
            for (File file : filesList) {
                if (file.isFile()) {
                    try{
                        itemList.add(Integer.valueOf(file.getName().substring(0, file.getName().indexOf("."))));
                    }catch(Exception ex){
                    }
                }
            }
            if(itemList.size() >0){
                List<Integer> orderedList =itemList.stream()
                        .sorted(Comparator.naturalOrder())
                        .collect(Collectors.toList());
                orderedList.stream().forEach((integer) -> {
                    this.cmbThreshold.addItem(integer.toString());
                });
            }
        }
    }
    
    private void fillCmbBitmapSize(){
        this.cmbBitmapSize.addItem(null);
        ArrayList<Integer> itemList = new ArrayList<>();
        if(this.cmbTopology.getSelectedItem()!=null){
            String pathTmp = this.basePath+"\\"+ 
                    this.cmbScenario.getSelectedItem() +"\\"+
                    this.cmbTopology.getSelectedItem();
            File dirTmp = new File(pathTmp);
            File[] filesList = dirTmp.listFiles();
            for (File file : filesList) {
                if (file.isDirectory()) {
                    try{
                        itemList.add(Integer.valueOf(file.getName()));
                    }catch(Exception ex){
                    }
                }
            }
            if(itemList.size() >0){
                List<Integer> orderedList =itemList.stream()
                        .sorted(Comparator.naturalOrder())
                        .collect(Collectors.toList());
                orderedList.stream().forEach((integer) -> {
                    this.cmbBitmapSize.addItem(integer.toString());
                });
            }
        }
    }
    
    private void fillCmbTopology(){
        if(this.cmbScenario.getSelectedItem()!=null){
            String pathTmp = this.basePath+"\\"+ this.cmbScenario.getSelectedItem();
            File dirTmp = new File(pathTmp);
            File[] filesList = dirTmp.listFiles();
            for (File file : filesList) {
                if (file.isDirectory()) {
                    this.cmbTopology.addItem(file.getName());
                }
            }
        }
    }
    
    private void fillCmbScenario(){
        this.cmbScenario.addItem(null);
        File[] filesList = this.dir.listFiles();
        for (File file : filesList) {
            if (file.isDirectory()) {
                this.cmbScenario.addItem(file.getName());
            }
        }
        this.cmbScenario.setSelectedIndex(-1);
    }
    
    /**
     * Preenche o conteudo das caixas de texto que são relativas a configuração do cenário.
     */
    private void fillTxtBoxes(){
        if(this.cmbScenario.getSelectedItem()!=null){
            String pathTmp = this.basePath + "\\"+ this.cmbScenario.getSelectedItem() + "\\detalhes.txt";
            LinkedList<String> detailsFileContent =readFile(pathTmp);
            if(!detailsFileContent.isEmpty()){
                this.txtTracer.setText(detailsFileContent.get(0));//primeira linha eh tempo inicial
                this.txtStartTime.setText(detailsFileContent.get(1));//segunda linha eh tempo inicial
                this.txtFinalTime.setText(detailsFileContent.get(2));//terceira linha eh tempo final
            }
        }else{
            this.txtTracer.setText("");
            this.txtStartTime.setText("");
            this.txtFinalTime.setText("");
        }
    }
    
    public LinkedHashMap<String, String> buildMapFromFile(String filePath,
            int maxTop){
        LinkedHashMap<String,String> mapFromFile=new LinkedHashMap<>();
        
        LinkedList<String> listFileData = readFile(filePath);
        int topCounter=0;
        
        for (String fileData: listFileData) {
            if(topCounter > maxTop-1){
                break;
            }
            String[] arrayFileData =fileData.split(":");
            String totalAccess = arrayFileData[0];//total de accessos aos nós
            String nodes = arrayFileData[1];//lista de nós com esse total de acessos
            mapFromFile.put(totalAccess, nodes);
            topCounter++;
            
        }
        return mapFromFile;
    }
    
    /**
     * Lê um arquivo e grava cada linha dele numa lista ordenada.
     * @param fileName nome do arquivo
     * @return lista ordenada com conteudo do arquivo
     */
    public LinkedList<String>  readFile(String fileName) {

        // This will reference one line at a time
        String line = null;
        LinkedList<String> detailsFileContent = new LinkedList<>();
        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = 
                new FileReader(fileName);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = 
                new BufferedReader(fileReader);

            while((line = bufferedReader.readLine()) != null) {
                detailsFileContent.add(line);
            }   
            // Always close files.
            bufferedReader.close();         
        }
        catch(FileNotFoundException ex) {
            System.out.println(
                "Unable to open file '" + 
                fileName + "'");                
        }
        catch(IOException ex) {
            System.out.println(
                "Error reading file '" 
                + fileName + "'");                  
            // Or we could just do this: 
            // ex.printStackTrace();
        }
        return detailsFileContent;
    }
  
    
    public Report fillReportData(LinkedHashMap<String,String> realAnalysisMap,
            LinkedHashMap<String,String> bitmapAnalysisMap,int maxTop){
        LinkedList<SubReport> lstSubReports = new LinkedList<>();
        int counter=1;//para o loop de analise real, ele serve para indicar a posicao desse registro
        //no ranking. Já no loop de analise de bitmap, ele serve para pegar o registro criado no primeiro loop
        //por isso conter tem inicios diferentes (1 e 0)
        for (Map.Entry<String, String> entry : realAnalysisMap.entrySet()) {
            String totalAccess = entry.getKey();
            String nodes = entry.getValue();
            SubReport subReport = new SubReport("#"+ counter, totalAccess, nodes);
            lstSubReports.add(subReport);
            counter++;
        }
        counter=0;
        for (Map.Entry<String, String> entry : bitmapAnalysisMap.entrySet()) {
            String totalAccess = entry.getKey();
            String nodes = entry.getValue();
            lstSubReports.get(counter).setBitmapValue(totalAccess);
            lstSubReports.get(counter).setBitmapNodePair(nodes);
            counter++;
        }
        return new Report(String.valueOf(maxTop), lstSubReports);
    }
    
    
    private void buildPDF(Report reportModel, File barChartFile){
         File jasperFile=null;
         String jasperSubReportFolderPath=null;
         JasperReport subreport=null;
         Image convertedImageForChart=null;
        try {
            String reportFolderPath = new File(reportsPath).getCanonicalPath();
            String jasperFolderPath = reportFolderPath + "\\jasper\\";
            jasperSubReportFolderPath = reportFolderPath + "\\jasper\\bitmapResultsSubreport.jasper";
            jasperFile = new File(jasperFolderPath + "\\bitmapResults.jasper");
            
            subreport = (JasperReport) JRLoader.loadObjectFromFile(jasperSubReportFolderPath);
            convertedImageForChart =ImageIO.read(barChartFile);
        } catch (Exception ex) {
            Logger.getLogger(GeraRelatorio.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        HashMap params = new HashMap<>();
        params.put("maxTop", reportModel.getMaxTop());
        params.put("topologyName", this.cmbTopology.getSelectedItem());
        params.put("tracerName", this.txtTracer.getText());
        params.put("bitmapSize", this.cmbBitmapSize.getSelectedItem());
        params.put("threshold", this.cmbThreshold.getSelectedItem() + "%");
        params.put("startTime", this.txtStartTime.getText());
        params.put("finalTime", this.txtFinalTime.getText());
        params.put("lstAnalysisData", reportModel.getLstAnalysisData());
        params.put("SUBREPORT_DIR",subreport);
        params.put("top10BarChart", convertedImageForChart);
        
        try {
            JasperReport report = (JasperReport) JRLoader.loadObject(jasperFile);
            JasperPrint jasperPrint = JasperFillManager.fillReport(report, params, new JREmptyDataSource());

            JRPdfExporter pdfExporter = new JRPdfExporter();
            pdfExporter.setExporterInput(new SimpleExporterInput(jasperPrint));
            pdfExporter.setExporterOutput(new SimpleOutputStreamExporterOutput(generatedPdfPath));

            SimplePdfExporterConfiguration configuration = new SimplePdfExporterConfiguration();
            configuration.setCreatingBatchModeBookmarks(true);
            pdfExporter.setConfiguration(configuration);
            pdfExporter.exportReport();
        } catch (Exception ex) {
            Logger.getLogger(GeraRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private File createGraphForReport(LinkedList<SubReport> listSubReport, int maxTop){
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset( );
        
        for (SubReport subReport : listSubReport) {
            dataset.addValue(Long.valueOf(subReport.getRealValue()), "Real",subReport.getPos());
            dataset.addValue(Double.valueOf(subReport.getBitmapValue()), "BitMap",subReport.getPos());
        }

        JFreeChart barChart = ChartFactory.createBarChart(
        "", 
        "Top " + maxTop, "Número de Pacotes", 
        dataset,PlotOrientation.VERTICAL, 
        true, true, false);
         
        int width = 640;    /* Width of the image */
        int height = 480;   /* Height of the image */ 
        File fileBarChart = new File( reportsPath+"reportChart.jpeg" ); 
        try {
            ChartUtilities.saveChartAsJPEG( fileBarChart , barChart , width , height );
        } catch (IOException ex) {
            Logger.getLogger(GeraRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
        return fileBarChart;
    }
    
    private void showPdfFile(String path){
         try{

        if ((new File(path)).exists()) {

            Process p = Runtime
               .getRuntime()
               .exec("rundll32 url.dll,FileProtocolHandler "+ path);
            p.waitFor();

        } else {

            System.out.println("File does not exist");

        }

      } catch (Exception ex) {
        ex.printStackTrace();
      }
    }
    
    private void enableAllcomponents(boolean isEnabled){
        
        //habilitando/desabilitando todas combobox
        this.cmbScenario.setEnabled(isEnabled);
        this.cmbTopology.setEnabled(isEnabled);
        this.cmbBitmapSize.setEnabled(isEnabled);
        this.cmbThreshold.setEnabled(isEnabled);
        
        //habilitando/desabilitando os radio button
        this.rb10.setEnabled(isEnabled);
        this.rb20.setEnabled(isEnabled);
        
        //habilitando/desabilitando botoes
        this.btnGenerateReport.setEnabled(isEnabled);
        
        this.setEnabled(isEnabled);
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GeraRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GeraRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GeraRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeraRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GeraRelatorio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerateReport;
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JComboBox<String> cmbBitmapSize;
    private javax.swing.JComboBox<String> cmbScenario;
    private javax.swing.JComboBox<String> cmbThreshold;
    private javax.swing.JComboBox<String> cmbTopology;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton rb10;
    private javax.swing.JRadioButton rb20;
    private java.awt.TextField txtFinalTime;
    private java.awt.TextField txtStartTime;
    private java.awt.TextField txtTracer;
    // End of variables declaration//GEN-END:variables
}
